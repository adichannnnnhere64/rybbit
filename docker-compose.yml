services:
  clickhouse:
    image: clickhouse/clickhouse-server:25.4.2
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse_config:/etc/clickhouse-server/config.d
    networks:
      track:
    environment:
      - CLICKHOUSE_DB=${CLICKHOUSE_DB:-analytics}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER:-default}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-frog}
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8123/ping",
        ]
      interval: 3s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  postgres:
    image: postgres:17.4
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-frog}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-frog}
      - POSTGRES_DB=${POSTGRES_DB:-analytics}
    networks:
      track:
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  backend:
    image: ghcr.io/rybbit-io/rybbit-backend:${IMAGE_TAG:-latest}
    build:
      context: ./server
      dockerfile: Dockerfile
    networks:
      track:
      traefik:
    environment:
      - NODE_ENV=production
      - CLICKHOUSE_HOST=http://clickhouse:8123
      - CLICKHOUSE_DB=${CLICKHOUSE_DB:-analytics}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-frog}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-analytics}
      - POSTGRES_USER=${POSTGRES_USER:-frog}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-frog}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BASE_URL=${BASE_URL}
      - DISABLE_SIGNUP=${DISABLE_SIGNUP}
    depends_on:
      clickhouse:
        condition: service_healthy
      postgres:
        condition: service_started
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: traefik
      traefik.http.routers.backend-api.rule: "Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      traefik.http.routers.backend-api.tls: "true"
      traefik.http.routers.backend-api.tls.certresolver: myresolver
      traefik.http.services.backend-api.loadbalancer.server.port: 3001
      traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes: /api
      traefik.http.routers.backend-api.middlewares: strip-api-prefix
      traefik.http.routers.backend-api.priority: 2

  client:
    image: ghcr.io/rybbit-io/rybbit-client:${IMAGE_TAG:-latest}
    networks:
      track:
      traefik:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_BACKEND_URL: ${BASE_URL}
        NEXT_PUBLIC_DISABLE_SIGNUP: ${DISABLE_SIGNUP}
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=${BASE_URL}
      - NEXT_PUBLIC_DISABLE_SIGNUP=${DISABLE_SIGNUP}
    depends_on:
      - backend
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: traefik
      traefik.http.routers.client.rule: Host(`${DOMAIN_NAME}`)
      traefik.http.routers.client.tls: "true"
      traefik.http.routers.client.tls.certresolver: myresolver
      traefik.http.services.client.loadbalancer.server.port: 3002
      traefik.http.routers.client.priority: 1

volumes:
  clickhouse-data:
  postgres-data:
networks:
  track:
  traefik:
    name: traefik_web
    external: true
